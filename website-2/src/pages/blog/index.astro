---
import Layout from '../../components/Layout.astro';
import BlogCard from '../../components/BlogCard.astro';
import BlogTagFilter from '../../components/BlogTagFilter.jsx';
import SupportCTA from '../../components/SupportCTA.astro';
import { jsx } from 'astro/jsx-runtime';
import { getCollection } from 'astro:content';

// Get all blog posts and normalize data
const allPosts = (await getCollection('blog'))
  .map(post => {
    // Prefer 'date' but fallback to 'publishedAt' if present
    let date = post.data.date || post.data.publishedAt;
    if (date && !(date instanceof Date)) {
      // Fix: force local time parsing to avoid off-by-one errors
      date = new Date(date + 'T00:00:00');
    }
    return {
      title: post.data.title,
      description: post.data.description,
      slug: post.slug,
      date,
      tags: post.data.tags || [],
      readingTime: post.data.readingTime,
      author: post.data.author,
      type: post.data.type,
      featured: false,
    };
  })
  .filter(post => {
    // Validate required fields
    return (
      post.title &&
      post.description &&
      post.slug &&
      post.date instanceof Date &&
      !isNaN(post.date.getTime())
    );
  })
  .sort((a, b) => b.date.getTime() - a.date.getTime());

// Show all posts, no artificial split
const posts = allPosts;

// Gather all unique tags from all posts
const tagSet = new Set();
allPosts.forEach(post => (post.tags || []).forEach(tag => tagSet.add(tag)));
const allTags = Array.from(tagSet);

// Assign a color to each tag (cycling through a palette)
const tagColors = [
  'bg-blue-600', 'bg-green-600', 'bg-pink-600', 'bg-yellow-500', 'bg-purple-600', 'bg-red-600', 'bg-teal-600', 'bg-orange-500', 'bg-indigo-600', 'bg-rose-600',
];
const getTagColor = (tag, idx) => tagColors[idx % tagColors.length];

// Pre-process tag for display: split on delimiters, capitalize each word, detect acronyms
function formatTag(tag) {
  // Split on -, _, ., or camelCase boundaries
  let words = tag
    .replace(/([a-z])([A-Z])/g, '$1 $2') // camelCase to space
    .split(/[-_.\s]+/);
  words = words.map(w => {
    // If word is all uppercase or all lowercase and <=5 chars, treat as acronym
    if ((/^[A-Z]{2,}$/.test(w)) || (/^[a-z]{2,5}$/.test(w) && w === w.toLowerCase())) {
      return w.toUpperCase();
    }
    // Otherwise, capitalize first letter only
    return w.charAt(0).toUpperCase() + w.slice(1).toLowerCase();
  });
  return words.join(' ');
}
---

<Layout 
  title="Blog - TinkerForge AI"
  description="Insights, research updates, and perspectives on AI safety, alignment, and the future of artificial intelligence."
>
  <main class="min-h-screen bg-gradient-to-br from-surface-dark via-surface to-surface-dark">
    <!-- Hero Section -->
    <section class="relative pt-24">
      <!-- Background effects -->
      <div class="absolute inset-0">
        <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-primary-600/10 rounded-full blur-3xl"></div>
        <div class="absolute bottom-1/3 right-1/4 w-80 h-80 bg-accent-600/10 rounded-full blur-3xl"></div>
      </div>
      
      <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-5xl md:text-7xl font-bold mb-8 bg-gradient-to-r from-white via-gray-100 to-gray-300 bg-clip-text text-transparent leading-[1.15] pb-2">
            Blog
          </h1>
          <p class="text-xl md:text-2xl text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed">
            Insights, research updates, and perspectives on AI safety, alignment, 
            and the future of artificial intelligence.
          </p>
        </div>
      </div>
    </section>

    <!-- Dynamic Tag Cluster with Filtering -->
    <section id="categories" class="pt-8 pb-20 relative">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-white mb-4">
            Categories
          </h2>
        </div>
        <BlogTagFilter client:load allTags={allTags} posts={posts} tagColors={tagColors} formatTag={formatTag} />
      </div>
    </section>

    <!-- All Posts now rendered by BlogTagFilter above -->


    <!-- Newsletter Signup -->
    <section class="py-20 relative">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <div class="p-12 bg-gradient-to-br from-surface via-surface-light to-surface border border-surface-border rounded-3xl backdrop-blur-sm relative overflow-hidden">
          <div class="absolute inset-0 bg-gradient-to-br from-primary-600/10 via-transparent to-accent-600/10"></div>
          
          <div class="relative z-10">
            <h2 class="text-3xl md:text-4xl font-bold text-white mb-6">
              Stay Updated
            </h2>
            <p class="text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
              Get the latest research updates, blog posts, and insights from TinkerForge AI 
              delivered to your inbox.
            </p>
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
              <a 
                href="/newsletter" 
                class="px-8 py-4 bg-primary-600 hover:bg-primary-500 text-white font-semibold rounded-xl transition-all duration-200 transform hover:scale-105"
              >
                Subscribe to Newsletter
              </a>
              <a 
                href="/rss.xml" 
                class="px-8 py-4 bg-surface-light hover:bg-surface border border-surface-border text-white font-semibold rounded-xl transition-all duration-200 transform hover:scale-105 backdrop-blur-sm"
              >
                RSS Feed
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Support CTA -->
    <SupportCTA variant="compact" />
  </main>
</Layout>
