class u{errors=[];isClient;constructor(){this.isClient=typeof window<"u"}logError(e,n={},t="medium",i=!0){const a=e instanceof Error?e.message:e,l=e instanceof Error&&e.stack||"No stack trace available",r={message:a,stack:l,context:{...n,timestamp:new Date,userAgent:this.isClient?navigator.userAgent:"Server",url:this.isClient?window.location.href:"Server-side"},severity:t,recoverable:i,suggestions:this.generateSuggestions(a,n)};return this.errors.push(r),this.logToConsole(r),this.isClient&&t==="critical"&&this.reportToService(r),r}generateSuggestions(e,n){const t=[];return e.includes("Cannot read properties of undefined")&&(t.push("Check if the property exists before accessing it"),t.push("Add optional chaining (?.) or nullish coalescing (??)"),t.push("Verify data is loaded before rendering component")),e.includes("toISOString")&&(t.push("Ensure the value is a valid Date object"),t.push("Add date validation before calling toISOString()"),t.push("Consider using a safe date formatting function")),e.includes("publishedAt")&&(t.push("Check if publishedAt exists in your markdown frontmatter"),t.push("Verify date format in content files"),t.push("Add default date handling for missing publishedAt")),n.component==="BlogCard"&&(t.push("Verify all required props are passed to BlogCard"),t.push("Check content collection schema"),t.push("Ensure blog posts have valid frontmatter")),t}logToConsole(e){console.group(`${{low:"ðŸŸ¡",medium:"ðŸŸ ",high:"ðŸ”´",critical:"ðŸ’€"}[e.severity]} [${e.severity.toUpperCase()}] ${e.context.component||"Unknown"}`),console.error("Message:",e.message),e.context.function&&console.log("Function:",e.context.function),e.context.props&&console.log("Props:",e.context.props),console.log("Timestamp:",e.context.timestamp?.toISOString()),console.log("Recoverable:",e.recoverable),e.suggestions?.length&&(console.group("ðŸ’¡ Suggestions:"),e.suggestions.forEach((t,i)=>{console.log(`${i+1}. ${t}`)}),console.groupEnd()),console.log("Stack Trace:",e.stack),console.groupEnd()}reportToService(e){console.warn("ðŸš¨ Critical error would be reported to monitoring service:",{message:e.message,component:e.context.component,timestamp:e.context.timestamp})}getErrors(){return[...this.errors]}clearErrors(){this.errors=[]}getErrorsBySeverity(e){return this.errors.filter(n=>n.severity===e)}}const s=new u;function c(o,e,n){try{return o()}catch(t){return s.logError(t instanceof Error?t:new Error(String(t)),e,"medium",!0),n}}async function g(o,e,n){try{return await o()}catch(t){return s.logError(t instanceof Error?t:new Error(String(t)),e,"medium",!0),n}}const f={format(o,e={}){return c(()=>{if(!o)throw new Error("Date is null or undefined");const n=o instanceof Date?o:new Date(o);if(isNaN(n.getTime()))throw new Error(`Invalid date: ${o}`);return new Intl.DateTimeFormat("en-US",{year:"numeric",month:"long",day:"numeric",...e}).format(n)},{component:"SafeDate",function:"format",props:{date:o,options:e}},"Date not available")||"Date not available"},toISOString(o){return c(()=>{if(!o)throw new Error("Date is null or undefined");const e=o instanceof Date?o:new Date(o);if(isNaN(e.getTime()))throw new Error(`Invalid date: ${o}`);return e.toISOString()},{component:"SafeDate",function:"toISOString",props:{date:o}},new Date().toISOString())||new Date().toISOString()}},d={validateBlogPost(o){const n=["title","description","slug","date"].filter(t=>!o[t]);return n.length>0?(s.logError(`Missing required props: ${n.join(", ")}`,{component:"BlogCard",function:"validateBlogPost",props:o},"high",!1),!1):!0}};export{d as PropValidator,f as SafeDate,s as errorTracker,c as safeExecute,g as safeExecuteAsync};
